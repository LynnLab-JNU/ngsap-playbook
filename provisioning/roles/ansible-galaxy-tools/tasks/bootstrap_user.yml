---

- name: Install argparse
  pip: name=argparse virtualenv={{ galaxy_venv_dir }} virtualenv_command="{{ pip_virtualenv_command | default( 'virtualenv' ) }}" #"
  when: ((ansible_os_family == "RedHat") or (ansible_distribution == "CentOS")) and (ansible_distribution_major_version == "6")  

- name: Copy the bootstrap user management script
  copy: src=manage_bootstrap_user.py dest={{ galaxy_server_dir }}/manage_bootstrap_user.py owner={{ galaxy_user_name }}

- name: Create Galaxy bootstrap user
  command: chdir={{ galaxy_server_dir }} {{ galaxy_venv_dir }}/bin/python manage_bootstrap_user.py -c {{ galaxy_config_file }} create -e {{ galaxy_tools_admin_user }} -p {{ galaxy_tools_admin_user_password }}
  register: api_key
  when: create_user is defined and create_user

- name: Set bootstrap user as Galaxy Admin
  lineinfile: dest={{ galaxy_config_file }} state=present insertafter="app:main" regexp="admin_users =" line="admin_users = {{ galaxy_tools_admin_user }}"  #"
  when: create_user is defined and create_user

- name: Delete Galaxy bootstrap user
  command: chdir={{ galaxy_server_dir }} {{ galaxy_venv_dir }}/bin/python manage_bootstrap_user.py -c {{ galaxy_config_file }} delete
  when: delete_user is defined and delete_user

- name: Remove bootstrap user as Galaxy Admin
  lineinfile: dest={{ galaxy_config_file }} state=absent insertafter="app:main" regexp="admin_users =" line="admin_users = {{ galaxy_tools_admin_user }}"  #"
  when: delete_user is defined and delete_user

- include: restart_galaxy.yml

- name: Remove the bootstrap user management script
  file: dest={{ galaxy_server_dir }}/manage_bootstrap_user.py state=absent

# This needs to come last or it will short-circuit execution when the galaxy_tools_api_key fact is set
- set_fact: galaxy_tools_api_key="{{ api_key.stdout_lines[0] }}"  #"
  when: create_user is defined and create_user
